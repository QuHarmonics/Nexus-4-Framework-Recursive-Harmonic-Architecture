
def harmonic_gap_fill(sequence, expected_length):
    """
    Fills missing nucleotides by grouping sequence into length-based harmonic clusters,
    inserting 'N' placeholders between clusters to preserve recursive structure.

    Args:
    - sequence (str): Original nucleotide sequence.
    - expected_length (int): Desired final length.

    Returns:
    - filled_sequence (str)
    - highlighted_sequence (str)
    - total_pairs (int)
    - added_pairs (int)
    """
    import math

    original_length = len(sequence)
    missing_length = expected_length - original_length

    if missing_length <= 0:
        return sequence, sequence, original_length // 2, 0

    # Grouping into harmonic cluster windows
    def cluster_lengths(seq_len, group_count):
        base_len = seq_len // group_count
        remainder = seq_len % group_count
        return [base_len + 1 if i < remainder else base_len for i in range(group_count)]

    # Estimate number of clusters using sqrt rule
    group_count = int(math.sqrt(original_length))
    group_sizes = cluster_lengths(original_length, group_count)

    # Segment original sequence into harmonic clusters
    clusters = []
    idx = 0
    for size in group_sizes:
        clusters.append(sequence[idx:idx+size])
        idx += size

    # Insert 'N' fillers between each cluster
    fillers_needed = missing_length
    inserted = 0
    filled_sequence = []
    highlighted_sequence = []

    for i, cluster in enumerate(clusters):
        filled_sequence.append(cluster)
        highlighted_sequence.append(cluster)
        if inserted < fillers_needed and i < len(clusters) - 1:
            filled_sequence.append('N')
            highlighted_sequence.append('[N]')
            inserted += 1

    # If still more to fill, pad end
    if inserted < fillers_needed:
        remaining = fillers_needed - inserted
        filled_sequence.append('N' * remaining)
        highlighted_sequence.append('[N]' * remaining)

    filled_str = ''.join(filled_sequence)
    highlighted_str = ''.join(highlighted_sequence)
    total_pairs = len(filled_str) // 2
    added_pairs = (len(filled_str) - original_length) // 2

    return filled_str, highlighted_str, total_pairs, added_pairs


# Original sequence and parameters
original_sequence = (
    "ATGGGGACGGAAGACTGCGATCACGAAGGGCGGTCGGTTGCGGCTCCCGTGGAGGTTACGGCGCTGTATG"
    "CGACCGACGGGTGCGTTATCACCTCCTCGCTCGCCCTCCTCACAAACTGCCTGCTGGGGGCCGAGCCGTT"
    "GTATATATTCAGCTACGACGCGTACCGGCCCGATGCGCCCAATGGCCCCACGGGCGCGCCCACCGAACAG"
    "GAGAGGTTCGAGGGGAGCCGGGCGCTCTACCGGGATGCGGGGGGGCTAAATGGCGATTCATTTCGGGTGA"
    "CCTTTTGTTTATTGGGGACGGAAGTGGGCGTGACCCACCACCCGAAAGGGCGCACCCGGCCCATGTTTGT"
    "GTGCCGCTTCGAGCGAGCGGACGACGTCGCCGTGCTCCAAGACGCCCTGGGCCGCGGGACCCCATTGCTC"
    "CCGGCCCACATCACAGCAACTCTGGACTTGGAGGCGACGTTTGCGCTCCACGCTAACATCATCATGGCTC"
    "TCACCGTGGCCATCGTCCACAACGCCCCCGCCCGCATCGGCAGCGGCAGCACCGCCCCCCTGTATGAGCC"
    "CGGCGAATCGATGCGCTCGGTCGTCGGGCGCATGTCCCTGGGGCAGCGCGGCCTCACCACGCTGTTCGTG"
    "CACCACGAGGCGCGCGTGCTGGCGGCGTACCGCCGGGCGTATTATGGGAGCGCCCAAAGCCCCTTTTGGT"
    "TTCTGAGCAAATTCGGCCCGGACGAAAAGAGCCTGGTGCTGGCCGCTAGGTACTACCTACTCCAGGCTCC"
    "GCGCTTGGGGGGCGCCGGAGCCACGTACGATCTGCAGGCCGTGAAAGACATCTGCGCGACCTACGCGATC"
    "CCCCACGACCCACGCCCCGACACCCTCAGTGCCGCGTCCTTGACCTCGTTCGCCGCCATCACTCGGTTCT"
    "GTTGCACGAGCCAGTACTCCCGCGGGGCCGCGGCCGCTGGGTTTCCGCTGTATGTGGAGCGCCGCATCGC"
    "CGCCGACGTACGCGAGACCGGCGCGCTGGAGAAGTTCATCGCCCACGATCGCAGCTGCCTGCGCGTGTCC"
    "GACCGGGAATTCATTACGTACATCTACCTGGCCCACTTTGAGTGCTTCAGCCCCCCGCGCCTGGCCACGC"
    "ATCTCCGGGCCGTGACCACCCACGACCCCAGCCCCGCGGCCAGCACGGAGCAGCCCTCGCCCCTGGGTCG"
    "GGAGGCGGTGGAACAGTTCTTCCGGCACGTGCGCGCCCAGCTGAACATCCGCGAGTACGTAAAGCAAAAC"
    "GTCACCCCCAGGGAAACCGCCCTGGCGGGAGACGCGGCCGCCGCCTACCTGCGCGCGCGCACGTATGCCC"
    "CGGCGGCCCTCACGCCCGCCCCCGCGTACTGCGGGGTCGCAGACTCGTCCACCAAAATGATGGGACGTCT"
    "GGCGGAAGCAGAAAGGCTCCTAGTCCCCCACGGCTGGCCCGCGTTCGCACCAACAACCCCCGGGGACGAC"
    "GCGGGGGGCGGCACTGCCGCCCCCCAGACCTGCGGAATCGTCAAGCGCCTCCTCAAGCTGGCCGCCACGG"
    "AGCAGCAGGGCACGACGCCCCCGGCGATCGCGGCTCTCATGCAGGACGCGTCGGTCCAAACCCCCCTGCC"
    "CGTGTACAGGATTACCATGTCCCCGACCGGCCAGGCGTTTGCCGCGGCGGCGCGGGACGACTGGGCCCGC"
    "GTGACGCGGGACGCGCGCCCGCCGGAAGCGACCGTGGTCGCGGACGCGGCGGCGGCGCCCGAGCCCGGCG"
    "CGCTCGGCCGGCGGCTCACGCGCCGCATTTGCGCCCGGGGCCCCGCGCTCCCCCCGGGCGGCCTGGCCGT"
    "CGGGGGCCAGATGTACGTGAACCGCAACGAGATCTTCAACGCCGCGCTGGCCGTTACGAACATCATCCTG"
    "GATCTGGACATCGCCCTGAAGGAGCCCGTCCCCTTTCCCCGGCTCCACGAGGCCCTGGGTCACTTTAGGC"
    "GCGGGGCGCTGGCGGCGGTTCAGCTGTTGTTTCCCGCGGCCCGCGTAGACCCCGACGCCTATCCCTGTTA"
    "TTTTTTCAAAAGCGCCTGTCGGCCCCGCGCGCCGCCCGTCTGTGCGGGCGACGGGCCCCTGGCCGGTGGC"
    "GACGACGGCGACGGGGACTGGTTCCCCGACGCCGGTGGTCCCGGCGACGAGGAGTGGGAGGAGGACACGG"
    "ACCCCATGGACACGACCCACGGCCCCCTCCCGGACGACGAGGCCGCGTACCTCGACCTGCTACACGAACA"
    "GATACCAGCGGCGACGCCCAGCGAACCGGACTCCGTCGTGTGTTCCTGCGCCGACAAGATCGGGCTGCGC"
    "GTGTGCCTACCGGTCCCCGCCCCGTACGTTGTGCACGGCTCCCTGACGATGCGTGGGGTGGCGAGGGTGA"
    "TCCAGCAGGCGGTGCTGTTGGACCGCGACTTCGTGGAGGCCGTAGGGAGCCACGTAAAGAACTTTTTGCT"
    "GATCGATACGGGCGTGTACGCCCACGGCCACAGCCTGCGCTTGCCGTATTTCGCCAAGATCGGCCCCGAC"
    "GGCTCCGCGTGCGGCCGGTTATTGCCCGTCTTCGTGATCCCCCCCGCGTGCGAGGACGTTCCGGCGTTCG"
    "TCGCCGCGCACGCCGACCCGCGGCGCTTCCACTTTCACGCCCCGCCCATGTTTTCCGCGGCCCCGCGGGA"
    "GATCCGCGTCCTCCACAGCCTGGGCGGGGACTATGTCAGCTTTTTCGAGAAGAAGGCGTCGCGCAACGCC"
    "CTGGAGCACTTTGGGCGACGCGAGACCCTGACGGAGGTTCTGGGCCGCTACGATGTGCGGCCCGACGCCG"
    "GGGAGACCGTGGAGGGGTTCGCGTCAGAACTGCTGGGGCGAATAGTCGCGTGCATCGAGGCCCACTTTCC"
    "CGAGCACGCGCGGGAATATCAGGCCGTGTCCGTTCGCCGGGCCGTCATTAAGGACGACTGGGTCCTGCTG"
    "CAGCTGATCCCCGGCCGCGGCGCCCTGAACCAAAGCCTCTCGTGTCTGCGCTTCAAGCACGGCAGGGCAA"
    "GTCGCGCGACGGCCCGGACCTTTCTCGCGCTGAGCGTCGGGACCAACAACCGCCTATGCGCGTCCCTGTG"
    "TCAGCAGTGCTTTGCCACTAAATGCGATAACAACCGCCTGCACACGCTGTTTACCGTCGATGCGGGCACG"
    "CCATGCTCGCGGTCCGCTCCCTCCAGCACCTCACGACCGTCATCTTCATAA"
)

expected_sequence_length = 4096

# Execute the harmonic filler
filled_sequence, highlighted_sequence, total_pairs, added_pairs = harmonic_gap_fill(
    original_sequence, expected_sequence_length
)

# Output summary
print("Original Sequence Length:", len(original_sequence))
print("Expected Sequence Length:", expected_sequence_length)
print("Filled Sequence Length:", len(filled_sequence))
print("Total Pairs:", total_pairs)
print("Added Pairs:", added_pairs)
print("\nHighlighted (Preview):\n", highlighted_sequence[:5000])
