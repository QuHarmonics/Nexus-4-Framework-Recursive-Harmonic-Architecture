# Full ASCII text (the hash interpreted as ASCII characters after transformation)
ascii_text = (

)

# Step 1: Get positions of all '3' characters
three_positions = [i for i, char in enumerate(ascii_text) if char == '3']

# Step 2: Compute Δ (difference between each and the previous)
diffs = [None] + [three_positions[i] - three_positions[i - 1] for i in range(1, len(three_positions))]

# Step 3: Compute running total of the diffs (starting from the 3rd index)
running_total = [None, None]
for i in range(2, len(diffs)):
    total = sum(diffs[1:i+1]) if None not in diffs[1:i+1] else None
    running_total.append(total)

# Step 4: Compute ratio between Δ and running total (starting from the 4th index)
ratios = [None, None, None]
for i in range(3, len(diffs)):
    rt = running_total[i]
    delta = diffs[i]
    if rt and delta is not None:
        ratios.append(delta / rt)
    else:
        ratios.append(None)

# Step 5: Display as DataFrame
import pandas as pd

df = pd.DataFrame({
    "Index of '3'": three_positions,
    "Δ from previous": diffs,
    "Running total Δ": running_total,
    "Δ / Running Total": ratios
})

# Print full DataFrame (if needed, write to CSV or JSON)
print(df.to_string(index=False))
# df.to_csv("fold_3_analysis.csv", index=False)
